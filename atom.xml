<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>二月江北</title>
  
  <subtitle>海到无边天做涯，山登绝顶我为峰。</subtitle>
  <link href="http://corpser.github.io/atom.xml" rel="self"/>
  
  <link href="http://corpser.github.io/"/>
  <updated>2023-07-06T06:26:15.052Z</updated>
  <id>http://corpser.github.io/</id>
  
  <author>
    <name>二月江北</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用py抓取b站影评</title>
    <link href="http://corpser.github.io/2017/11/24/%E4%BD%BF%E7%94%A8py%E6%8A%93%E5%8F%96b%E7%AB%99%E5%BD%B1%E8%AF%84/"/>
    <id>http://corpser.github.io/2017/11/24/%E4%BD%BF%E7%94%A8py%E6%8A%93%E5%8F%96b%E7%AB%99%E5%BD%B1%E8%AF%84/</id>
    <published>2017-11-24T13:36:18.000Z</published>
    <updated>2023-07-06T06:26:15.052Z</updated>
    
    <content type="html"><![CDATA[<h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>上周末看了一部甲方乙方的电影，看完以后发现下面的影评挺多的，就想分析一下，这个电影大家评论最多的关键词是什么。既然这么想了那就下手呗，f12查看b站评论的请求接口，一不小心被我找到了，，，，，，<br>那就请求这个接口呗，借用结巴分词和WordCloud词语，就是我想要的结果了。</p><span id="more"></span><h1 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h1><p>当然话不多说，请看效果图<br><img src="http://corpser.github.io/images/blibli.png"></p><h1 id="具体代码"><a href="#具体代码" class="headerlink" title="具体代码"></a>具体代码</h1><pre><code>&quot;&quot;&quot;简单Python爬虫，抓取b站某个电影的评论数据，生成词云&quot;&quot;&quot;import urllib.parseimport urllib.requestimport urllibfrom wordcloud import WordCloudimport jsonimport jiebaimport matplotlib.pyplot as plt# get请求def login_get(url):    response = urllib.request.urlopen(url)    text = response.read()    return text.decode(&#39;UTF-8&#39;)# post 请求def login_post(url, header, data):    data = urllib.parse.urlencode(data)    req = urllib.request.Request(url, data=data, headers=header)    response = urllib.request.urlopen(req, timeout=5)    return response.read().decode(&#39;UTF-8&#39;)#   写入文件def output_file(content, outPutFile):    outfile = open(file=outPutFile, mode=&quot;a&quot;, encoding=&quot;UTF-8&quot;)  # 以写的方式打开该文件    outfile.write(content)    outfile.flush()# 结巴分词def sliptsentence(inputFile, outPutFile):    try:        # 以读的方式打开该文件        inFile=open(file=inputFile, mode=&quot;r&quot;,encoding=&quot;UTF-8&quot;)        # 以写的方式打开该文件        outFile=open(file=outPutFile,mode=&quot;w&quot;,encoding=&quot;UTF-8&quot;)        # 循环遍历打开的文件，取出其中每行，并对每行进行分词        for eachLine in inFile:            # 此句取某一行的数据，并且去除两端的空格，并以utf-8的形式编码            line=eachLine.strip().encode(&quot;UTF-8&quot;,&quot;ingore&quot;)            wordList=jieba.cut(line);            # 将当前行得到的分词数据，写入到输出文件中去            outstr=&#39;&#39;            for word in wordList:                outstr+=word                outstr+=&quot;/&quot;            outFile.write(outstr.strip()+&quot;\n&quot;)    except Exception as ex:        print(&quot;文件处理出错&quot;,ex)    finally:       inFile.close()       outFile.close()if __name__ == &#39;__main__&#39;:    for i in range(1,38):        url=&#39;http://api.bilibili.com/x/v2/reply?jsonp=jsonp&amp;pn=&#39;+str(i)+&#39;&amp;type=1&amp;oid=2651396&amp;sort=0&amp;_=1510978290823&#39;        result = login_get(url)        jsons = json.loads(result, encoding=&#39;UTF-8&#39;)        replies = jsons[&#39;data&#39;][&#39;replies&#39;]        message = &#39;&#39;        for user in replies:            content=user[&#39;content&#39;]            message += content[&#39;message&#39;]+&#39;\n&#39;            print(content[&#39;message&#39;])        output_file(message,&#39;/home/jia/content.log&#39;)    sliptsentence(&#39;/home/jia/content.log&#39;, &#39;/home/jia/jieba.json&#39;)    f = open(u&#39;/home/jia/jieba.json&#39;, &#39;r&#39;, encoding=&#39;UTF-8&#39;).read()    wordcloud = WordCloud(background_color=&quot;white&quot;, width=1000, height=860,                          margin=2, font_path=&#39;/home/jia/bole.ttf&#39;).generate(f)    plt.imshow(wordcloud)    plt.axis(&quot;off&quot;)    plt.show()    wordcloud.to_file(&#39;test.png&#39;)</code></pre><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><ul><li>请求评论的接口，请注意计算分页的大小。</li><li>使用WocrdCloud制作词语时，Linux系统一定要指定中文字体，不然人家不认识中文。Windows系统好像本来就是中文字体。。。</li><li>别的就没什么要注意的了。</li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h1&gt;&lt;p&gt;上周末看了一部甲方乙方的电影，看完以后发现下面的影评挺多的，就想分析一下，这个电影大家评论最多的关键词是什么。既然这么想了那就下手呗，f12查看b站评论的请求接口，一不小心被我找到了，，，，，，&lt;br&gt;那就请求这个接口呗，借用结巴分词和WordCloud词语，就是我想要的结果了。&lt;/p&gt;</summary>
    
    
    
    <category term="python" scheme="http://corpser.github.io/categories/python/"/>
    
    
    <category term="python" scheme="http://corpser.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>linux日志查询技巧</title>
    <link href="http://corpser.github.io/2017/11/24/linux%E6%97%A5%E5%BF%97%E6%9F%A5%E8%AF%A2%E6%8A%80%E5%B7%A7/"/>
    <id>http://corpser.github.io/2017/11/24/linux%E6%97%A5%E5%BF%97%E6%9F%A5%E8%AF%A2%E6%8A%80%E5%B7%A7/</id>
    <published>2017-11-24T13:26:28.000Z</published>
    <updated>2023-07-06T05:10:27.202Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux系统日志查询常用命令"><a href="#Linux系统日志查询常用命令" class="headerlink" title="Linux系统日志查询常用命令"></a>Linux系统日志查询常用命令</h1><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>当线上程序出现bug的时候，往往都是由于某种小的原因导致的，这个时候bug不能适时地显示，只能通过日志文件来定位bug出现的位置。<br>上周程序出现bug个的时候，领导盯着我查，感觉当时好气，自己怎么不提前学习一下这些命令呢，现在总结以下，以备来日不时之需。<br>日志查询命令主要有以下几种:</p><ul><li>cat</li><li>tail</li><li>head</li><li>sed</li><li>more</li><li>less</li><li>grep<br>以后遇见新学习的命令，再添加。以下是详细总结。</li></ul><a id="more"></a><h1 id="cat-命令"><a href="#cat-命令" class="headerlink" title="cat 命令"></a>cat 命令</h1><pre><code>参数：-n 或 --number 由 1 开始对所有输出的行数编号-b 或 --number-nonblank 和 -n 相似，只不过对于空白行不编号-s 或 --squeeze-blank 当遇到有连续两行以上的空白行，就代换为一行的空白行-v 或 --show-nonprinting</code></pre><p>三总用法</p><ol><li>创建新文件<br>cat test，此命令只能创建新文件，不能够编辑已有文件。</li><li>连接文件并打印到标准输出设备上<br>当文件较大时，文本在屏幕上迅速闪过（滚屏），用户往往看不清所显示的内容。因此，一般用more等命令分屏显示。为了控制滚屏，可以按Ctrl+S键，停止滚屏；按Ctrl+Q键可以恢复滚屏。按Ctrl+C（中断）键可以终止该命令的执行，并且返回Shell提示符状态。<br>cat test.log | more</li><li>合并文件<br>把 textfile1 的档案内容加上行号后输入 textfile2 这个档案里</li></ol><pre><code>cat -n textfile1 &gt; textfile2</code></pre><p>把 textfile1 和 textfile2 的档案内容加上行号（空白行不加）之后将内容附加到 textfile3 里。</p><pre><code>cat -b textfile1 textfile2 &gt;&gt; textfile3</code></pre><p>把test.txt文件扔进垃圾箱，赋空值test.txt</p><pre><code>cat /dev/null &gt; /etc/test.txt</code></pre><h1 id="tail-命令"><a href="#tail-命令" class="headerlink" title="tail 命令"></a>tail 命令</h1><p>tail命令用于显示文件中末尾的内容（默认显示最后10行内容）</p><pre><code>tail语法格式：    tail [ -f ] [ -c Number | -n Number | -m Number | -b Number | -k Number ] [ File ]或者    tail [ -r ] [ -n Number ] [ File ]</code></pre><p>使用说明：</p><ul><li>tail 命令从指定点开始将 File 参数指定的文件写到标准输出。如果没有指定文件，则会使用标准输入。</li><li>Number 变量指定将多少单元写入标准输出。 Number 变量的值可以是正的或负的整数。</li><li>如果值的前面有 +（加号），从文件开头指定的单元数开始将文件写到标准输出。</li><li>如果值的前面有 -（减号），则从文件末尾指定的单元数开始将文件写到标准输出。</li><li>如果值前面没有 +（加号）或 -（减号），那么从文件末尾指定的单元号开始读取文件。<br>主要参数：</li></ul><pre><code>-f  用于循环读取文件的内容，监视文件的增长,常用此命令监控日志。tail -f test.log-F 与-f类似，区别在于当将监视的文件删除重建后-F仍能监视该文件内容-f则不行，-F有重试的功能，会不断重试-c N 显示文件末尾N字节的内容tail -c 10 seo-test.log ,这样会显示文件最后十个英文字母-n  显示文件末尾n行内容tail -n 100 test.log,显示最后100行内容。-q  显示多文件的末尾内容时，不显示文件名-v  显示多文件的末尾内容时，显示文件名（此为tail的默认选项）-s N 与-f合用，表示休眠N秒后在读取文件内容（默认为1s）--pid=&lt;进程号PID&gt; 与“-f”选项连用，当指定的进程号的进程终止后，自动退出tail命令</code></pre><h1 id="head-命令"><a href="#head-命令" class="headerlink" title="head 命令"></a>head 命令</h1><p>head 与 tail 就像它的名字一样的浅显易懂，它是用来显示开头或结尾某个数量的文字区块，head 用来显示档案的开头至标准输出中，而 tail 想当然尔就是看文件的结尾。</p><p>使用说明：<br>用来显示档案的开头至标准输出中，默认head命令打印其相应文件的开头10行。<br>常用参数:</p><pre><code>-q   隐藏文件名-v   显示文件名以上两个命令多用于打开多文件的情况-c   &lt;字节&gt; 显示字节数-n   &lt;行数&gt; 显示的行数-z   像屏幕滚动输出所有内容</code></pre><h1 id="sed命令"><a href="#sed命令" class="headerlink" title="sed命令"></a>sed命令</h1><p>暂缺</p><h1 id="more-命令"><a href="#more-命令" class="headerlink" title="more 命令"></a>more 命令</h1><p>more命令是一个基于vi编辑器文本过滤器，它以全屏幕的方式按页显示文本文件的内容，支持vi中的关键字定位操作。more名单中内置了若干快捷键，常用的有H（获得帮助信息），Enter（向下翻滚一行），空格（向下滚动一屏），Q（退出命令）。</p><p>该命令一次显示一屏文本，满屏后停下来，并且在屏幕的底部出现一个提示信息，给出至今己显示的该文件的百分比：–More–（XX%）可以用下列不同的方法对提示做出回答：</p><pre><code>按Space键：显示文本的下一屏内容。按Enier键：只显示文本的下一行内容。按斜线符|：接着输入一个模式，可以在文本中寻找下一个相匹配的模式。按H键：显示帮助屏，该屏上有相关的帮助信息。按B键：显示上一屏内容。 按Q键：退出rnore命令。</code></pre><p>参数说明：</p><pre><code>-&lt;数字&gt;：指定每屏显示的行数；-d：显示“[press space to continue,&#39;q&#39; to quit.]”和“[Press &#39;h&#39; for instructions]”；-c：不进行滚屏操作。每次刷新这个屏幕；-s：将多个空行压缩成一行显示；-u：禁止下划线；+&lt;数字&gt;：从指定数字的行开始显示。</code></pre><p><strong><em>实例</em></strong><br>显示文件file的内容，但在显示之前先清屏，并且在屏幕的最下方显示完核的百分比。</p><pre><code>more -dc file</code></pre><p>显示文件file的内容，每10行显示一次，而且在显示之前先清屏。</p><pre><code>more -c -10 file</code></pre><h1 id="less-命令"><a href="#less-命令" class="headerlink" title="less 命令"></a>less 命令</h1><p><a href="http://blog.csdn.net/mxj588love/article/details/54313769" target="_blank" rel="noopener">http://blog.csdn.net/mxj588love/article/details/54313769</a><br>放一篇博文链接,我没怎么使用过。</p><h1 id="grep-命令"><a href="#grep-命令" class="headerlink" title="grep 命令"></a>grep 命令</h1><p>这个命令很强大啊！我也不敢随便总结，下面是一位大神总结的，我感觉比较全了。<br><a href="https://www.cnblogs.com/end/archive/2012/02/21/2360965.html" target="_blank" rel="noopener">https://www.cnblogs.com/end/archive/2012/02/21/2360965.html</a></p><h1 id="常用查询命令组合"><a href="#常用查询命令组合" class="headerlink" title="常用查询命令组合:"></a>常用查询命令组合:</h1><p>1.查询日志中含有某个关键字的信息</p><p>cat app.log | grep ‘error’</p><p>2.查询日志尾部最后10行的日志</p><p>tail  -n 10  app.log</p><p>3.查询10行之后的所有日志</p><p>tail -n +10 app.log</p><p>4.查询日志文件中的头10行日志</p><p>head -n 10  app.log</p><p>5.查询日志文件除了最后10行的其他所有日志</p><p>head -n -10  app.log</p><p>6.查询日志中含有某个关键字的信息,显示出行号(在1的基础上修改)</p><p>cat -n  app.log | grep ‘error’</p><p>7.显示102行,前10行和后10行的日志</p><p>cat -n app.log | tail -n+92 | head -n 20</p><p>8.根据日期时间段查询(前提日志总必须打印日期,先通过grep确定是否有该时间点)</p><p><strong><em>sed -n ‘/2014-12-17 16:17:20/,/2014-12-17 16:17:36/p’  app.log</em></strong></p><p>9.使用more和less命令(分页查看,使用空格翻页)</p><p> cat -n app.log | grep “error” |more</p><p>10.把日志保存到文件</p><p>cat -n app.log | grep “error”  &gt; temp.txt</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Linux系统日志查询常用命令&quot;&gt;&lt;a href=&quot;#Linux系统日志查询常用命令&quot; class=&quot;headerlink&quot; title=&quot;Linux系统日志查询常用命令&quot;&gt;&lt;/a&gt;Linux系统日志查询常用命令&lt;/h1&gt;&lt;h1 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h1&gt;&lt;p&gt;当线上程序出现bug的时候，往往都是由于某种小的原因导致的，这个时候bug不能适时地显示，只能通过日志文件来定位bug出现的位置。&lt;br&gt;上周程序出现bug个的时候，领导盯着我查，感觉当时好气，自己怎么不提前学习一下这些命令呢，现在总结以下，以备来日不时之需。&lt;br&gt;日志查询命令主要有以下几种:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cat&lt;/li&gt;
&lt;li&gt;tail&lt;/li&gt;
&lt;li&gt;head&lt;/li&gt;
&lt;li&gt;sed&lt;/li&gt;
&lt;li&gt;more&lt;/li&gt;
&lt;li&gt;less&lt;/li&gt;
&lt;li&gt;grep&lt;br&gt;以后遇见新学习的命令，再添加。以下是详细总结。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="linux" scheme="http://corpser.github.io/categories/linux/"/>
    
    
    <category term="linux" scheme="http://corpser.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu开发软件安装</title>
    <link href="http://corpser.github.io/2017/10/14/ubuntu%E5%BC%80%E5%8F%91%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/"/>
    <id>http://corpser.github.io/2017/10/14/ubuntu%E5%BC%80%E5%8F%91%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/</id>
    <published>2017-10-13T21:33:48.000Z</published>
    <updated>2023-07-06T05:10:27.205Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>一个屌丝程序员，时常需要的软件也就那几个。当然，做为一个Java小白，我需要的软件大概就是以下几个，jdk、tomcat、git、vim、jb全家桶、chrome、atom、lantern等一些个人生活常用软件。下面就一一介绍以下这些软件如何安装。  </p><h2 id="软件安装介绍"><a href="#软件安装介绍" class="headerlink" title="软件安装介绍"></a>软件安装介绍</h2><p>在安装软件之前，首先要明白两个命令，sudo apt-get install 和 sudo dpck。这两个命令一个是在线安装，一个是下载deb的安装包即离线安装。不明白的可以参考别的博文。这里不在介绍!（所有安装包默认都已下载完毕,所有命令都是在非root用户下操作）<br><a id="more"></a></p><h3 id="vim和git的安装"><a href="#vim和git的安装" class="headerlink" title="vim和git的安装"></a>vim和git的安装</h3><p>这两个很简单，直接在终端中分别执行以下两条命令：  </p><pre><code>sudo apt-get install gitsudo apt-get install vim</code></pre><h3 id="java开发环境的搭建"><a href="#java开发环境的搭建" class="headerlink" title="java开发环境的搭建"></a>java开发环境的搭建</h3><p>jdk的安装包直接可以在甲骨文公司的官方网站下载，ubuntu的安装包请下载tar.gz结尾的文件。下载成以后，自己选择安装目录，然后将压缩包拷贝过去，在终端中CD到安装目录，执行以下命令解压:  </p><pre><code>tar -zxvf XXX.tar.gz</code></pre><p>解压成以后使用mv命令重新命名为java，然后在终端中执行<strong><em>vim ~/.bashrc</em></strong>命令配置Java环境变量,该文件编辑的是当前用户的环境变量，不是全局的，只在当前用户生效。内容如下:  </p><pre><code>#javaexport JAVA_HOME=/home/jia/javaexport PATH=$JAVA_HOME/bin:$PATHexport CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</code></pre><p>编辑保存以后，执行<strong><em>source ~/.bashrc</em></strong> 命令，这条命令会使刚编译的配置文件生效，在终端中执行java\javac命令，查看环境变量是否生效。  </p><h3 id="maven的安装"><a href="#maven的安装" class="headerlink" title="maven的安装"></a>maven的安装</h3><p>在Apache的官方网站下载maven后，使用tar命令解压。建议解压后的文件和Java文件放在一起。然后配置maven环境变量，和Java环境变量一样。bashrc文件内容如下：  </p><pre><code>#mavenMAVEN_HOME=/home/jia/maven/export MAVEN_HOMEexport PATH=${PATH}:${MAVEN_HOME}/bin</code></pre><h3 id="JB全家桶安装"><a href="#JB全家桶安装" class="headerlink" title="JB全家桶安装"></a>JB全家桶安装</h3><p>JB公司的IDE很好用，我在学校学习的时候，也是使用的eclipse，后来就慢慢的换成idea了，后来接触了pycharm和webstrom,感觉这些都是神器啊。我在JB公司下载的都是tar.gz的压缩文件。安装十分简单。tar -zxvf ×××.tar.gz命令解压，然后在解压后的文件中找到sh启动脚本启动。一般脚本都是在bin目录下，仔细找找就能发现了，启动完成以后，IDE会自动创建桌面图标，不过它会智能的提问你一下，这时千万不要拒绝啊！    </p><h3 id="chrome、atom、lantern、搜狗输入法的安装"><a href="#chrome、atom、lantern、搜狗输入法的安装" class="headerlink" title="chrome、atom、lantern、搜狗输入法的安装"></a>chrome、atom、lantern、搜狗输入法的安装</h3><p>chrome下载传送门  <a href="https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb" target="_blank" rel="noopener">chrome下载链接</a><br>lantern下载请移步github搜索关键词lantern<br>atom下载传送门  <a href="https://atom-installer.github.com/v1.21.1/atom-amd64.deb?s=1507768431&amp;ext=.deb" target="_blank" rel="noopener">atom</a><br>搜狗输入法下载传送门  <a href="http://cdn2.ime.sogou.com/dl/index/1491565850/sogoupinyin_2.1.0.0086_amd64.deb?st=H5kpm_eorYrsD3PGM4mueQ&amp;e=1507907727&amp;fn=sogoupinyin_2.1.0.0086_amd64.deb" target="_blank" rel="noopener">搜狗</a><br>这几个下载的都是deb安装包，必须使用dpck 命令安装，命令介绍如下：<br> dpkg dpkg命令软件包管理 dpkg命令是Linux系统用来安装、创建和管理软件包的实用工具。   </p><pre><code> 语法 dpkg(选项)(参数) 选项 -i：安装软件包； -r：删除软件包； -P：删除软件包的同时删除其配置文件； -L：显示于软件包关联的文件； -l：显示已安装软件包列表； --unpack：解开软件包； -c：显示软件包内文件列表； --confiugre：配置软件包。 参数 Deb软件包：指定要操作的.deb软件包。 实例 dpkg -i package.deb #安装包 dpkg -r package #删除包 dpkg -P package #删除包（包括配置文件） dpkg -L package #列出与该包关联的文件 dpkg -l package #显示该包的版本 dpkg --unpack package.deb #解开deb包的内容 dpkg -S keyword #搜索所属的包内容 dpkg -l #列出当前已安装的包 dpkg -c package.deb #列出deb包的内容 dpkg --configure package #配置包 来自: http://man.linuxde.net/dpkg</code></pre><p>当然，以下三种也有在线安装的方式，喜欢的话可以自己尝试以下。<br><a href="http://www.linuxidc.com/Linux/2016-05/131096.htm" target="_blank" rel="noopener">http://www.linuxidc.com/Linux/2016-05/131096.htm</a><br>上面的这个链接比较详细的介绍了chrome的命令行安装方式，当然这个是我尝试过的。  </p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>其实在Linux系统安装软件并不是很困难，命令就是那几个，多用几次就习惯了。这样基本的开发环境和学习环境就搭建起来了。喜欢听音乐的同学，可以安装一个网易云音乐，不过它ubuntu系统磨合的不太好，就每次切换音乐的时候会卡顿一次。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h2&gt;&lt;p&gt;一个屌丝程序员，时常需要的软件也就那几个。当然，做为一个Java小白，我需要的软件大概就是以下几个，jdk、tomcat、git、vim、jb全家桶、chrome、atom、lantern等一些个人生活常用软件。下面就一一介绍以下这些软件如何安装。  &lt;/p&gt;
&lt;h2 id=&quot;软件安装介绍&quot;&gt;&lt;a href=&quot;#软件安装介绍&quot; class=&quot;headerlink&quot; title=&quot;软件安装介绍&quot;&gt;&lt;/a&gt;软件安装介绍&lt;/h2&gt;&lt;p&gt;在安装软件之前，首先要明白两个命令，sudo apt-get install 和 sudo dpck。这两个命令一个是在线安装，一个是下载deb的安装包即离线安装。不明白的可以参考别的博文。这里不在介绍!（所有安装包默认都已下载完毕,所有命令都是在非root用户下操作）&lt;br&gt;</summary>
    
    
    
    <category term="ubuntu" scheme="http://corpser.github.io/categories/ubuntu/"/>
    
    
    <category term="ubuntu" scheme="http://corpser.github.io/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu桌面美化</title>
    <link href="http://corpser.github.io/2017/10/10/ubuntu%E6%A1%8C%E9%9D%A2%E7%BE%8E%E5%8C%96/"/>
    <id>http://corpser.github.io/2017/10/10/ubuntu%E6%A1%8C%E9%9D%A2%E7%BE%8E%E5%8C%96/</id>
    <published>2017-10-10T14:03:46.000Z</published>
    <updated>2023-07-06T06:26:15.052Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>安装好ubuntu系统以后，作为一个简洁的程序员，一方面要美化操作系统，毕竟老夫也是有着一番少女心的，另一方面就要体现程序员的本色了。美化桌面环境和安装各种IDE。</p><h2 id="ubuntu桌面环境的美化"><a href="#ubuntu桌面环境的美化" class="headerlink" title="ubuntu桌面环境的美化"></a>ubuntu桌面环境的美化</h2><p>当你安装好ubuntu系统以后，肯定是欣喜若狂的，都听大婶说Linux操作系统妙用无穷，是程序员居家旅行必备良品。可是当你进入这系统以后，尝试着使用的时候，你却发现这么垃圾反人类的系统是给人用的嘛？当然喽，我第一次也就是这种感觉，垃圾的桌面环境，不友好的图形化操作！唯一看顺眼的就是ubuntu内置的火狐浏览器。不过当你喜欢上它以后就再也离不开他了！</p><span id="more"></span><h3 id="ubuntu-unity桌面"><a href="#ubuntu-unity桌面" class="headerlink" title="ubuntu unity桌面"></a>ubuntu unity桌面</h3><p>当你进入乌班图系统后，接触到的其实是unity桌面，根据百度百科的解释，它是脱胎于gnome桌面的，它使用了一些gnome桌面的一些组件，但是并没有完全使用gnome shell。<br><em><strong>百科解释</strong></em><br><img src="http://corpser.github.io/images/ubuntu/ubuntu16.png"></p><h3 id="ubuntu-gnome-桌面的安装"><a href="#ubuntu-gnome-桌面的安装" class="headerlink" title="ubuntu gnome 桌面的安装"></a>ubuntu gnome 桌面的安装</h3><p>gnome桌面是很美的，你再选择一个美美哒的桌面背景，那美轮美奂的感觉，很快你就会忘记在失去Windows的痛苦，沉醉在这简洁的环境中，就像婴儿肌肤般的润滑。和Windows相比，它就行豆蔻年华的少女，通红的胴体，任由你去探索，而万恶的Windows就像浓妆艳抹的恶妇，臃肿不堪！<br>安装gnome桌面只需要以下几条命令:  </p><pre><code>安装之前先添加库并更新，已保证后面的安装顺利sudo add-apt-repository ppa:gnome3-team/gnome3-stagingsudo add-apt-repository ppa:gnome3-team/gnome3sudo apt-get updatesudo apt-get dist-upgradesudo apt-get install gnome-shellsudo apt-get install ubuntu-gnome-desktop</code></pre><p>安装时弹出窗选择如下:<br><img src="http://corpser.github.io/images/ubuntu/ubuntu17.png"><br>当然萝卜白菜各有所爱，卸载命令如下:</p><pre><code>sudo apt-get remove gnome-shellsudo apt-get remove ubuntu-gnome-desktop</code></pre><p>安装重启的时候要注意,登录的时候要选择第一项哦,千万不要尝试第二项，否则会开不了机，不要怪我没有告诉你！<br><img src="http://corpser.github.io/images/ubuntu/ubuntu18.png">  </p><p>重启进入系统如下:<br><img src="http://corpser.github.io/images/ubuntu/ubuntu14.png"></p><p>选择安装ARC主题:</p><pre><code>arc-theme安装方法：sudo add-apt-repository ppa:noobslab/themessudo apt-get updatesudo apt-get install arc-theme安装gnome-tweak-tool用于切换主题：sudo apt-get install gnome-tweak-tool运行gnome-tweak-tool选择Arc-Dark为GTK+主题。</code></pre><p>arc主题提供了很多选择，各种颜色搭配。可以让你定制自己喜欢的桌面。  </p><h2 id="系统美化总结"><a href="#系统美化总结" class="headerlink" title="系统美化总结"></a>系统美化总结</h2><p>如果你喜欢Mac桌面下的那个dock风格，你也可以在乌班图下安装，就在乌班图的软件中心搜索dock即可，不过我个人认为那个工具很鸡肋，消耗内存，和乌班图系统融合的也不是很好，不太建议使用。arc-theme主题还在使用中感觉也很不错。配置高的话可以安装一个试试。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h2&gt;&lt;p&gt;安装好ubuntu系统以后，作为一个简洁的程序员，一方面要美化操作系统，毕竟老夫也是有着一番少女心的，另一方面就要体现程序员的本色了。美化桌面环境和安装各种IDE。&lt;/p&gt;
&lt;h2 id=&quot;ubuntu桌面环境的美化&quot;&gt;&lt;a href=&quot;#ubuntu桌面环境的美化&quot; class=&quot;headerlink&quot; title=&quot;ubuntu桌面环境的美化&quot;&gt;&lt;/a&gt;ubuntu桌面环境的美化&lt;/h2&gt;&lt;p&gt;当你安装好ubuntu系统以后，肯定是欣喜若狂的，都听大婶说Linux操作系统妙用无穷，是程序员居家旅行必备良品。可是当你进入这系统以后，尝试着使用的时候，你却发现这么垃圾反人类的系统是给人用的嘛？当然喽，我第一次也就是这种感觉，垃圾的桌面环境，不友好的图形化操作！唯一看顺眼的就是ubuntu内置的火狐浏览器。不过当你喜欢上它以后就再也离不开他了！&lt;/p&gt;</summary>
    
    
    
    <category term="ubuntu" scheme="http://corpser.github.io/categories/ubuntu/"/>
    
    
    <category term="ubuntu" scheme="http://corpser.github.io/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu优盘安装</title>
    <link href="http://corpser.github.io/2017/10/09/ubuntu%E4%BC%98%E7%9B%98%E5%AE%89%E8%A3%85/"/>
    <id>http://corpser.github.io/2017/10/09/ubuntu%E4%BC%98%E7%9B%98%E5%AE%89%E8%A3%85/</id>
    <published>2017-10-09T13:21:58.000Z</published>
    <updated>2023-07-06T06:26:15.052Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>本文将介绍如何通过u盘安装ubuntu系统，首先是在Windows系统下通过软通牒制作u盘镜像，其次是在安装过程中的分区问题，以及如何与自己的Windows系统共存，其实Windows10&#x2F;8&#x2F;7与ubuntu双系统是举一反三的，本人安装的是ubuntu17.04&#x2F;Windows10双系统。（有些图是引用网络上的，步骤完全没问题）</p><span id="more"></span><h2 id="工具准备"><a href="#工具准备" class="headerlink" title="工具准备"></a>工具准备</h2><p>在安装前请准备以下安装包和工具。<br>  1.U盘一个。<br>  2.ubuntu系统 <a href="http://releases.ubuntu.com/17.04/ubuntu-17.04-desktop-amd64.iso">下载地址</a><br>  3.软通牒系统 <a href="http://sw.bos.baidu.com/sw-search-sp/software/25aa83cb6273c/uiso9_cn_9.7.0.3476.exe">百度下载中心</a><br>在Windows系统上下载软通牒并安装，下载ubuntu系统备用。  </p><h2 id="镜像制作"><a href="#镜像制作" class="headerlink" title="镜像制作"></a>镜像制作</h2><p>1.软通牒软件如何安装不再介绍，安装好后选择试用即可。<br>如下图：<br><img src="http://corpser.github.io/images/ubuntu/ubuntu1.png"><br>2.进入软通牒，选择文件-&gt;打开<br><img src="http://corpser.github.io/images/ubuntu/ubuntu3.png"><br>3.选择已下载好的ubuntu镜像ISO文件<br><img src="http://corpser.github.io/images/ubuntu/ubuntu4.png"><br>4.打开之后是这个样子，注意软件的顶部文字，显示的是打开ubuntu镜像的<br><img src="http://corpser.github.io/images/ubuntu/ubuntu5.png"><br>5.然后选择启动-&gt;写入硬盘镜像<br><img src="http://corpser.github.io/images/ubuntu/ubuntu6.png"><br>6.此时设置如图，注意引导的写入是USB-HDD++，写入时间较长，请耐心等待<br><img src="http://corpser.github.io/images/ubuntu/ubuntu8.png"><br>7.写入完成以后，打开U盘是这个样子的！<br><img src="http://corpser.github.io/images/ubuntu/ubuntu7.png"><br>制作好U盘镜像以后，接下来我们就要安装了！</p><h2 id="系统安装"><a href="#系统安装" class="headerlink" title="系统安装"></a>系统安装</h2><p>系统安装并没有特殊的地方，和普通的Windows安装一样，F12（电脑型号不同按键可能不一样，同时有些人的电脑可能禁止了从u盘启动的选项，需要进入BIOS界面重新设置）进入启动选择操作。选择USB，也就是你的U盘，这样就可以直接进入ubuntu安装界面。<br><img src="http://corpser.github.io/images/ubuntu/ubuntu11.png"><br>上图要选择安装语言，默认是英文，左侧列表往下拉，就能找到中文简体选项。<br>选择安装(当然你也可以选择试用)以后，会让选择是否链接WiFi，是否安装驱动和更新，全部选否，或者不要勾选，等安装完成再更新。<br><img src="http://corpser.github.io/images/ubuntu/ubuntu9.png"><br>点击下一步，会出现下面两种情况，一种是已经安装有其他操作系统，一种是没有，如下图。<br><img src="http://corpser.github.io/images/ubuntu/ubuntu10.png"><img src="/images/ubuntu/ubuntu12.png"><br>傻瓜式安装选择第一项就可。<br>下面的选择继续<br><img src="http://corpser.github.io/images/ubuntu/ubuntu13.png"><br>后面的过程就是下一步，下一步了。时区、键盘设置、用户密码设置不在叙述。  </p><h2 id="分区问题"><a href="#分区问题" class="headerlink" title="分区问题"></a>分区问题</h2><p>如果在上面不是选择傻瓜式安装，而是选择自定义分区了，怎么办呢，其实作为从事开发工作的就应该选择自定义安装，这确实能够学到些东西。  </p><p>以下知乎上面说的，我截取了下了<br>作者：知乎用户<br>链接：<a href="https://www.zhihu.com/question/20565314/answer/15518260">https://www.zhihu.com/question/20565314/answer/15518260</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><p> Ubuntu 桌面系统的分区方案。<br> 要了解分区方案，先从 Linux 系统的目录结构说起。使用 Windows 系统的用户都知道，Windows 系统先有分区的存在，然后在不同的分区下创建文件目录结构。于是我们看到诸如 C:\Windows D:\Downloads 之类目录，也就是说每一个目录首先是存在于某个分区的。Linux 系统则相反，它首先确定有目录的存在，例如：&#x2F;， &#x2F;usr， &#x2F;media&#x2F;usb，&#x2F;media&#x2F;cdrom， &#x2F;disk 然后才确定这个目录上挂载的是哪个分区（甚至挂载的可能是CDROM， USB等外设以及ISO光盘镜像文件：类似 Windows 下虚拟光驱的作用）。访问某个目录，实质上就相当于访问挂载在这个目录上的分区，外设或者光盘镜像文件。<br> 我们在 上一篇 博客中提到过一个系统存储重要数据的目录： &#x2F;home 目录， 在通常的最佳实践中，可以把这个 home 目录作为一个单独的挂载点，挂载一个独立分区。这样做有几个好处：<br> 系统分区如果损坏，幷不影响到 &#x2F;home 分区所在的数据。这些数据通常非常重要，包括有你常用的软件，重要的文档以及各类软件的配置信息，反过来我们也鼓励把重要的数据存放在 &#x2F;home 目录下，使得他们保存在系统分区以外的分区，避免因为系统的问题受损。在重装系统，或者升级系统以后，&#x2F;home 分区的数据可以得到保留，最大程度的避免了软件安装和重新配置的耗时工作。在日常备份的工作中可以选择只备份 &#x2F;home 分区所在的数据，避免做全盘的备份。我自己就曾经因为在两年前安装Ubuntu 10.04的时候只分了一个分区，把 &#x2F;home 目录下的数据和系统文件存储在了同一个分区下，导致在安装Ubuntu 12.04的时候，在没有第二个分区和第二台电脑用来备份&#x2F;home目录数据的情况下，忍痛将整个系统连同&#x2F;home目录里的数据全部格式化，损失惨重， 教训深刻。<br> 所以一般来说一个 Ubuntu 的系统在安装之初应该有三个分区，他们分别是挂载于根目录： &#x2F;, home目录： &#x2F;home 的两个分区以及 swap 分区。swap分区是指虚拟内存的交换区，一般设置为实际内存容量的两倍大小即可。假设你有一台500G硬盘，2G内存的PC，那么比较好的分区分配方案是：根目录所在分区分配50G左右， swap分区分配4G，剩余空间全部留给 &#x2F;home 所在分区即可。<br><strong>安装注意事项在安装之前</strong>  ，记得备份本机重要数据。在电脑上插入启动U盘后，选择从U盘启动计算机：大多数电脑可以在出现启动画面的时候按F12选择启动媒介，此时选择U盘即可。之后一路安装 Ubuntu 会比较顺利，但是以下几个地方仍然需要注意：在 Installation type 界面选择 Something else 选项，这样你才有机会调整，保留现有分区以及分区上的数据，并将多个分区挂载到同一个系统的不同挂载点（上文所述的根目录和home目录）【推荐】。选择 ext4 文件系统格式作为 Linux 的文件系统格式。三个分区大小可按上个小节分配，根目录分区大小不必过大，50G至多，如果硬盘本身不大，只分配15G问题也不大。大多的数据应该存放在 &#x2F;home， 因此 &#x2F;home 所在分区应该足够大。Installation type 界面中 Device for boot loader installation 选项列表中记得选择硬盘所在条目一般是：&#x2F;dev&#x2F;sda，笔者安装 12.04 时因为不慎选择了 USB 所在媒介：&#x2F;dev&#x2F;sdb 导致安装完毕后只有插着USB才能启动系统，悲剧！(此种情况本人在安装过程也遇到了，只能费劲再重新来过！！！！！！)   </p><p>下面是本人整理的分区方案:</p><p>目录 | 建议大小 |格式 |描述<br>—|—|—|—|—<br>&#x2F; |10G-20G| ext4| 根目录<br>swap |&lt;2048M| swap| 交换空间<br>&#x2F;boot |500M左右 |ext4| Linux的内核及引导系统程序所需要的文件，比如 vmlinuz initrd.img文件都位于这个目录中。在一般情况下，GRUB或LILO系统引导管理器也位于这个目录；启动撞在文件存放位置，如kernels，initrd，grub。有人说200M可惜ubuntu17不够用，我被迫重装。<br>&#x2F;tmp| 5G左右| ext4| 系统的临时文件，一般系统重启不会被保存。（建立服务器需要？）<br>&#x2F;home |尽量大些 |ext4| 用户工作目录；个人配置文件，如个人环境变量等；所有账号分配一个工作目录。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>国庆八天假，几乎每天回来都会倒腾ubuntu系统，来来回回重装了好几次，可是折腾死我了！明天再接着介绍如何美化ubuntu，总不能装个那么丑的ubuntu工作吧，原生的unity主题太丑，影响我心情！  放个图!  </p><p><img src="http://corpser.github.io/images/ubuntu/ubuntu14.png">  </p><p>JB公司全家桶！<br><img src="http://corpser.github.io/images/ubuntu/ubuntu15.png">   </p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h2&gt;&lt;p&gt;本文将介绍如何通过u盘安装ubuntu系统，首先是在Windows系统下通过软通牒制作u盘镜像，其次是在安装过程中的分区问题，以及如何与自己的Windows系统共存，其实Windows10&amp;#x2F;8&amp;#x2F;7与ubuntu双系统是举一反三的，本人安装的是ubuntu17.04&amp;#x2F;Windows10双系统。（有些图是引用网络上的，步骤完全没问题）&lt;/p&gt;</summary>
    
    
    
    <category term="ubuntu" scheme="http://corpser.github.io/categories/ubuntu/"/>
    
    
    <category term="ubuntu" scheme="http://corpser.github.io/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>装饰模式</title>
    <link href="http://corpser.github.io/2017/09/25/%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/"/>
    <id>http://corpser.github.io/2017/09/25/%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/</id>
    <published>2017-09-25T06:23:43.000Z</published>
    <updated>2023-07-06T05:10:27.206Z</updated>
    
    <content type="html"><![CDATA[<p><strong><em>装饰设计模式</em></strong></p><h1 id="摘要："><a href="#摘要：" class="headerlink" title="摘要："></a>摘要：</h1><p>装饰模式指的是在不必改变原类文件和使用继承的情况下，动态地扩展一个对象的功能。它是通过创建一个包装对象，也就是装饰来包裹真实的对象。<br>（1） 装饰对象和真实对象有相同的接口。这样客户端对象就能以和真实对象相同的方式和装饰对象交互。<br>（2） 装饰对象包含一个真实对象的引用（reference）<br>（3） 装饰对象接受所有来自客户端的请求。它把这些请求转发给真实的对象。<br>（4） 装饰对象可以在转发这些请求以前或以后增加一些附加功能。这样就确保了在运行时，不用修改给定对象的结构就可以在外部增加附加的功能。在面向对象的设计中，通常是通过继承来实现对给定类的功能扩展。</p><a id="more"></a><h1 id="理论详解"><a href="#理论详解" class="headerlink" title="理论详解"></a>理论详解</h1><p>要求：自定义一些Reader类，读取不同的数据(装饰和继承的区别)<br>MyReader //专门用于读取数据的类</p><pre><code>|--MyTextReader        |--MyBufferTextReader|--MyMediaReader        |--MyBufferMediaReader|--MyDataReader        |--MyBufferDataReader</code></pre><p>如果将他们抽取出来，设计一个MyBufferReader，可以根据传入的类型进行增强</p><pre><code>class MyBufferReader {    MyBufferReader (MyTextReader text) {}    MyBufferReader (MyMediaReader media) {}    MyBufferReader (MyDataReader data) {}}</code></pre><p>但是上面的类拓展性很差。找到其参数的共同类型即共同实现的接口或者继承的类，通过多态的形式，可以提高拓展性.这样以后的类只要继承共同的类型,都能用这个增强类增强自身的功能</p><pre><code>class MyBufferReader  extends MyReader{    private MyReader r;                        //从继承变为了组成模式  装饰设计模式    MyBufferReader(MyReader r) {}}</code></pre><p>优化后的体系：</p><pre><code>|--MyTextReader    |--MyMediaReader    |--MyDataReader    |--MyBufferReader</code></pre><p> //增强上面三个。装饰模式比继承灵活，避免继承体系的臃肿。降低类与类之间的耦合性</p><p>装饰类只能增强已有的对象，具备的功能是相同的。所以装饰类和被装饰类属于同一个体系.</p><p>MyBuffereReader类：  自己写一个MyBuffereReader类，功能与BuffereReader相同</p><h1 id="代码示例："><a href="#代码示例：" class="headerlink" title="代码示例："></a>代码示例：</h1><pre><code>import java.io.FileInputStream;import java.io.FileNotFoundException;import java.io.IOException;import java.io.InputStreamReader;import java.io.Reader;/** * 基于i/o流的装饰模式练习 * @author Administrator * 2017年8月18日  下午4:32:00 */public class MyBufferReader extends Reader{     private Reader r;       MyBufferReader(Reader r){            this.r  = r;       }    @Override    public int read(char[] cbuf, int off, int len) throws IOException {        return  r.read(cbuf,off,len);      }    @Override    public void close() throws IOException {         r.close();      }   //一次读一行数据的方法     public String myReaderline()  throws IOException {         //定义一个临时容器，原BufferReader封装的是字符数组。         //为了演示方便。定义一个StringBuilder容器。最终要将数据变成字符串         StringBuilder sb = new StringBuilder();         int ch = 0;         while((ch = r.read()) != -1)         {             if(ch == &#39;\r&#39;)                  continue;             if(ch == &#39;\n&#39;)                    //遇到换行符\n,返回字符串                 return sb.toString();             else             sb.append((char)ch);         }         if(sb.length()!=0)                    //当最后一行不是以\n结束时候，这里需要判断             return sb.toString();         return null;     }     @SuppressWarnings(&quot;resource&quot;)public static void main(String[] args) throws Exception {       MyBufferReader myReader=new MyBufferReader(new InputStreamReader(new FileInputStream(&quot;E:/files.txt&quot;)));       System.out.println(myReader.myReaderline());       myReader.close();}}</code></pre><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><p>装饰模式相当于对房屋进行装修，不过在设计的时候，要避免对一个房屋装修，应该通过接口，定义一类房屋，对实现了这个接口的一类房屋进行装修。这样设计出来的装饰类，更具拓展性。只要符合这个接口的新建房屋都可以使用这个装修队来装修。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;&lt;em&gt;装饰设计模式&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&quot;摘要：&quot;&gt;&lt;a href=&quot;#摘要：&quot; class=&quot;headerlink&quot; title=&quot;摘要：&quot;&gt;&lt;/a&gt;摘要：&lt;/h1&gt;&lt;p&gt;装饰模式指的是在不必改变原类文件和使用继承的情况下，动态地扩展一个对象的功能。它是通过创建一个包装对象，也就是装饰来包裹真实的对象。&lt;br&gt;（1） 装饰对象和真实对象有相同的接口。这样客户端对象就能以和真实对象相同的方式和装饰对象交互。&lt;br&gt;（2） 装饰对象包含一个真实对象的引用（reference）&lt;br&gt;（3） 装饰对象接受所有来自客户端的请求。它把这些请求转发给真实的对象。&lt;br&gt;（4） 装饰对象可以在转发这些请求以前或以后增加一些附加功能。这样就确保了在运行时，不用修改给定对象的结构就可以在外部增加附加的功能。在面向对象的设计中，通常是通过继承来实现对给定类的功能扩展。&lt;/p&gt;</summary>
    
    
    
    <category term="设计模式" scheme="http://corpser.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="装饰模式" scheme="http://corpser.github.io/tags/%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>hexo2 新建文章</title>
    <link href="http://corpser.github.io/2017/09/16/hexo2-%E6%96%B0%E5%BB%BA%E6%96%87%E7%AB%A0/"/>
    <id>http://corpser.github.io/2017/09/16/hexo2-%E6%96%B0%E5%BB%BA%E6%96%87%E7%AB%A0/</id>
    <published>2017-09-16T15:35:09.000Z</published>
    <updated>2023-07-06T05:10:27.201Z</updated>
    
    <content type="html"><![CDATA[<h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><p>或许您已经通Git + Hexo 搭建个人博客网站了解到如何通过HEXO + GIT 实现个人博客网站的建立。但是尽管您已经成功建立博客网站，但是你需要对网站做合适的配置和调整才能迎合你的网站要求。本文主要介绍HEXO的基本操作命令和网站的基本配置方法。</p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本文主要围绕两部分进行介绍：</p><blockquote><p>1、HEXO的基本命令与基本目录结构<br>2、HEXO网站的配置文件与基本配置</p></blockquote><a id="more"></a><h3 id="HEXO的基本命令与基本目录结构"><a href="#HEXO的基本命令与基本目录结构" class="headerlink" title="HEXO的基本命令与基本目录结构"></a>HEXO的基本命令与基本目录结构</h3><h4 id="基本目录结构"><a href="#基本目录结构" class="headerlink" title="基本目录结构"></a>基本目录结构</h4><p>主目录 </p><hr><pre><code> 主目录├── .deploy       #需要部署的文件├── node_modules  #Hexo插件├── public        #生成的静态网页文件├── scaffolds     #模板├── source        #博客正文和其他源文件, 404 favicon CNAME 等都应该放在这里|   ├── _drafts   #草稿|   └── _posts    #文章├── themes        #主题├── _config.yml   #全局配置文件└── package.json</code></pre><hr><p>  主题目录</p><hr><pre><code> 主目录 ├── languages          #国际化 |   ├── default.yml    #默认 |   └── zh-CN.yml      #中文 ├── layout             #布局 |   ├── _partial       #局部的布局 |   └── _widget        #小挂件的布局 ├── script             #js脚本 ├── source             #源代码文件 |   ├── css            #CSS |   |   ├── _base      #基础CSS |   |   ├── _partial   #局部CSS |   |   ├── fonts      #字体 |   |   ├── images     #图片 |   |   └── style.styl #style.css |   ├── fancybox       #fancybox |   └── js             #js ├── _config.yml        #主题配置文件 └── README.md          #主题介绍</code></pre><p>以上目录，并不一一介绍，我们主要了解其中主要的部分：<br>主目录常用部分：<br>scaffolds<br>source<br>themes<br>config.yml<br>主题目录：<br>看需要，日常操作都会涉及到：但主要的还是config.yml、languages等。<br>接下来，我们继续根据目录介绍涉及的部分，站点配置部分更多涉及主题目录的配置。   </p><h4 id="HEXO的基本命令"><a href="#HEXO的基本命令" class="headerlink" title="HEXO的基本命令"></a>HEXO的基本命令</h4><p>每次部署的步骤，可按以下三步来进行。 </p><hr><pre><code>hexo clean      #清除PUBLIC和编译文件hexo generate   #编译网站目录hexo deploy     #同步到GIT 或者CODINGnpm install &lt;plugin-name&gt; --save #安装npm update #升级npm uninstall &lt;plugin-name&gt; #卸载</code></pre><hr><p>一些常用命令：</p><p>hexo new”postName” #新建文章 #存放在主目录的source下的POST目录下 </p><p>hexo new page”pageName” #新建页面 </p><p>hexo generate #生成静态页面至public目录 </p><p>hexo server #开启预览访问端口（默认端口4000，’ctrl + c’关闭server） </p><p>hexo deploy #将.deploy目录部署到GitHub </p><p>hexo help # 查看帮助 </p><p>hexo version #查看Hexo的版本 </p><h3 id="HEXO网站的配置文件与基本配置"><a href="#HEXO网站的配置文件与基本配置" class="headerlink" title="HEXO网站的配置文件与基本配置"></a>HEXO网站的配置文件与基本配置</h3><h4 id="HEXO网站的配置文件"><a href="#HEXO网站的配置文件" class="headerlink" title="HEXO网站的配置文件"></a>HEXO网站的配置文件</h4><blockquote><p>在根目录下的_config.yml主要是对网站的总属性进行设置<br> 如：网站标题，网站logo,网站插件使用等全局的属性<br>主题目录下的_config.yml主要是针对网站的布局，导航等特性设置进行设置</p></blockquote><h4 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h4><p>主配置文件介绍</p><pre><code>--- 主配置文件 # Site #站点信息 title: lmintlcx #标题 subtitle: 做人不卖萌跟咸鱼有什么区别 #副标题 description: lmintlcx lm lcx blog #描述 author: lmintlcx #作者 language: zh-Hans #语言 timezone: Asia/Shanghai #时区 # URL #链接格式 url: http://joryhe.coding.me/ #网址 root: / #根目录 permalink: post/:title.html #文章的链接格式 permalink_defaults: # Directory #目录 source_dir: source #源文件 public_dir: public #生成的网页文件 tag_dir: tags #标签 archive_dir: archives #归档 category_dir: categories #分类 code_dir: downloads/code i18n_dir: :lang #国际化 skip_render: # Writing #写作 new_post_name: :title.md #新文章标题 default_layout: post #默认模板 titlecase: false #标题转换成大写 external_link: true #新标签页里打开连接 filename_case: 0 render_drafts: false post_asset_folder: false relative_link: false future: true highlight: #语法高亮   enable: true   line_number: false #显示行号   auto_detect: true   tab_replace: # Category &amp; Tag #分类和标签 default_category: uncategorized #默认分类 category_map: tag_map: # Date / Time format #日期时间格式 date_format: YYYY-MM-DD time_format: HH:mm:ss # Pagination #分页 per_page: 20 #每页文章数, 设置成 0 禁用分页 pagination_dir: page # Extensions #插件和主题 ## 插件: http://hexo.io/plugins/ ## 主题: http://hexo.io/themes/ theme: next # Deployment #部署, joryhe是我的用户名, 同时发布GitHub  deploy:   type: git   repo:      github: github: git@github.com:joryhe/joryhe.github.io.git,master # Disqus #Disqus评论系统 disqus_shortname:  plugins: #插件，例如生成 RSS 和站点地图的 - hexo-generator-feed - hexo-generator-sitemap---</code></pre><h4 id="主题配置文件"><a href="#主题配置文件" class="headerlink" title="主题配置文件"></a>主题配置文件</h4><pre><code>---   主题配置文件   menu: #菜单     home: / #首页     archives: /archives #归档     about: /about #关于     #commonweal: /404.html #公益404     #tags: /tags #标签     #categories: /categories #分类   ## 经典介绍配置   # 小图标   favicon: /favicon.ico   # 默认关键词   keywords:    # 留空使用默认的, false 禁用, 也可以写指定的地址   rss:   # Icon fonts   # default | linecons | fifty-shades | feather   icon_font: default   # 代码高亮主题 https://github.com/chriskempson/tomorrow-theme   # normal | night | night eighties | night blue | night bright   highlight_theme: normal   # MathJax Support #数学公式   mathjax: true   # Schemes #启用主题中的主题Mist   scheme: Mist   # 侧边栏   #  - post    只在文章页面显示   #  - always  所有页面显示   #  - hide    隐藏   sidebar: always   # 自动滚动到&quot;阅读更多&quot;标记的下面   scroll_to_more: true   # 自动给目录添加序号   toc_list_number: true   # 自动截取摘要   auto_excerpt:     enable: false     length: 150   # Lato 字体   use_font_lato: true   # Make duoshuo show UA   # user_id must NOT be null when admin_enable is true!   # you can visit http://dev.duoshuo.com get duoshuo user id.   duoshuo_info:     ua_enable: true     admin_enable: false     user_id: 0     #admin_nickname: ROOT   ## DO NOT EDIT THE FOLLOWING SETTINGS   ## UNLESS YOU KNOW WHAT YOU ARE DOING   # 动画   use_motion: true   # Fancybox 看图插件   fancybox: true   # Static files   vendors: vendors   css: css   js: js   images: images   # Theme version   version: 0.4.5.1---    </code></pre><h5 id="添加小图标"><a href="#添加小图标" class="headerlink" title="添加小图标"></a>添加小图标</h5><p>将 favicon.ico 文件放在 source 目录下, 修改主题配置文件</p><hr><pre><code>codefavicon: /favicon.ico</code></pre><hr><p>####语言设置 <strong>主要语言代码：</strong> English (en) 中文简体 (zh-Hans) French (fr-FR) 正体中文 (zh-hk/zh-tw) Russian (ru) German (de) <strong>站点配置文件下定义语言：</strong></p><pre><code> code    language: zh-hk </code></pre><p>菜单导航栏设置<br>配置在主题配置文件下</p><pre><code> code     menu:       home: /       archives: /archives       categories: /categories       tags: /tags       commonweal: /404.html       about: /about</code></pre><p>新增标签页<br>使用命令hexp new page “tags” 并将页面类型设置为tags</p><pre><code> code    title: tags    date: 2016-04-19 22:37:08    type: &quot;tags&quot;</code></pre><p>通常情况下你的标签页并不需要评论框，取消评论代码</p><pre><code> code    title: tags    date: 2016-04-19 22:37:08    type: &quot;tags&quot;    comments: false</code></pre><p>在主题配置文件下的菜单设置项memu下设置，设置完成在主页导航可以看到标签导航栏</p><pre><code> code    menu:         tags: /tags</code></pre><p>新增分类页</p><p>使用命令hexp new page categories 并将页面类型设置为categories</p><pre><code> code    title: categories    date: 2016-04-19 22:38:00    type: &quot;categories&quot;</code></pre><p>通常情况下你的标签页并不需要评论框，取消评论代码</p><pre><code>code    title: categories    date: 2016-04-19 22:38:00    type: &quot;categories&quot;    comments: false</code></pre><p>在主题配置文件下的菜单设置项memu下设置，设置完成在主页导航可以看到分类导航栏</p><pre><code>code     menu:        categories: /categories</code></pre><p>关于自己颜面about</p><pre><code>hexo new page “about”新增about页面</code></pre><p>编辑source/about/index.md:<br>添加菜单导航，在主题配置文件</p><pre><code>code    menu:     about: /about</code></pre><p>RSS设置<br>NPM install hexo-generator-feed安装RSS插件<br>编辑主题配置文件 rss 字段</p><pre><code>code    rss: true</code></pre><p>正常情况下，会在你的网站根目录下生成atom.xml<br>侧栏设置<br>post - 默认行为, 在文章页面(拥有目录列表)时显示<br>always - 在所有页面中都显示<br>hide - 在所有页面中都隐藏(可以手动展开)。</p><pre><code>code    sidebar: post</code></pre><p>####头像设置 编辑站点配置文件, 新增字段 avatar</p><pre><code>code    avatar: /images/xxx.jpg</code></pre><p>作者名称</p><p>编辑站点配置文件的author<br>站点描述设置</p><p>编辑站点配置文件的description<br>侧边栏社交链接</p><p>站点配置文件新增字段 social, 然后添加社交站点名称与地址</p><pre><code>code    # Social links        social:          GitHub: https://github.com/lmintlcx          Twitter: https://twitter.com/lmintlcx          Zhihu: http://www.zhihu.com/people/lmintlcx          Douban: http://www.douban.com/people/lmintlcx          #Weibo: http://weibo.com/lmlcx</code></pre><p>腾讯公益 404 页面<br>source 目录下新建 404.html 页面</p><pre><code>code    &lt;!DOCTYPE HTML&gt;    &lt;html&gt;    &lt;head&gt;      &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=utf-8;&quot;/&gt;      &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot; /&gt;      &lt;meta name=&quot;robots&quot; content=&quot;all&quot; /&gt;      &lt;meta name=&quot;robots&quot; content=&quot;index,follow&quot;/&gt;    &lt;/head&gt;    &lt;body&gt;    &lt;script type=&quot;text/javascript&quot; src=&quot;http://www.qq.com/404/search_children.js&quot; charset=&quot;utf-8&quot; homePageUrl=&quot;your-site-url&quot; homePageName=&quot;回到我的主页&quot;&gt;&lt;/script&gt;    &lt;/body&gt;    &lt;/html&gt;</code></pre><p>文章摘录<br>NexT 支持三种方式来控制首页文章的显示方式</p><blockquote><p>1.在文章中使用 手动进行截断<br>2.在文章的 front-matter 中添加 description, 内容为文章摘要<br>3.自动形成摘要, 在主题配置文件中添加</p><pre><code>code    auto_excerpt:      enable: true      length: 150 #默认截取的长度为 150 字符</code></pre></blockquote><p>设定首页/归档/标签页面文章的篇数<br>安装以下插件</p><pre><code>code    hexo-generator-index    hexo-generator-archive    hexo-generator-tag</code></pre><p>站点配置文章中设定</p><pre><code class="code">       index_generator:         per_page: 5       archive_generator:         per_page: 20         yearly: true         monthly: true       tag_generator:         per_page: 10</code></pre><p>畅言评论系统</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h3&gt;&lt;p&gt;或许您已经通Git + Hexo 搭建个人博客网站了解到如何通过HEXO + GIT 实现个人博客网站的建立。但是尽管您已经成功建立博客网站，但是你需要对网站做合适的配置和调整才能迎合你的网站要求。本文主要介绍HEXO的基本操作命令和网站的基本配置方法。&lt;/p&gt;
&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;本文主要围绕两部分进行介绍：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1、HEXO的基本命令与基本目录结构&lt;br&gt;2、HEXO网站的配置文件与基本配置&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="hexo教程" scheme="http://corpser.github.io/categories/hexo%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="hexo" scheme="http://corpser.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>hexo的使用方法1</title>
    <link href="http://corpser.github.io/2016/06/01/hexo1-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://corpser.github.io/2016/06/01/hexo1-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</id>
    <published>2016-06-01T15:47:44.000Z</published>
    <updated>2023-07-06T05:10:27.201Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="创建一个新的帖子"><a href="#创建一个新的帖子" class="headerlink" title="创建一个新的帖子"></a>创建一个新的帖子</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>更多信息: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="运行服务器"><a href="#运行服务器" class="headerlink" title="运行服务器"></a>运行服务器</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><pre><code class="bash">$ hexo generate</code></pre><p>更多信息: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><a id="more"></a><h3 id="部署到远程站点"><a href="#部署到远程站点" class="headerlink" title="部署到远程站点"></a>部署到远程站点</h3><pre><code class="bash">$ hexo deploy</code></pre><p>更多信息: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;创建一个新的帖子&quot;&gt;&lt;a href=&quot;#创建一个新的帖子&quot; class=&quot;headerlink&quot; title=&quot;创建一个新的帖子&quot;&gt;&lt;/a&gt;创建一个新的帖子&lt;/h3&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ hexo new &amp;quot;My New Post&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;更多信息: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;运行服务器&quot;&gt;&lt;a href=&quot;#运行服务器&quot; class=&quot;headerlink&quot; title=&quot;运行服务器&quot;&gt;&lt;/a&gt;运行服务器&lt;/h3&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ hexo server
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/server.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Server&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;生成静态文件&quot;&gt;&lt;a href=&quot;#生成静态文件&quot; class=&quot;headerlink&quot; title=&quot;生成静态文件&quot;&gt;&lt;/a&gt;生成静态文件&lt;/h3&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ hexo generate
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;更多信息: &lt;a href=&quot;https://hexo.io/docs/generating.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Generating&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Hexo教程" scheme="http://corpser.github.io/categories/Hexo%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="hexo" scheme="http://corpser.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
